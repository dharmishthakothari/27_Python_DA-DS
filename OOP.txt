condition stmt (if,if-elif,nested if...)
loops (for,while)
break , continue,pass
data types 
operators
string manipulation
list
set
dictionary
tuple
functions - types,lambda, map,filter,reduce
modules 
file handling
exception handling 
OOP - Object Oriented Programming 
	
	prodecure oriented - each in term of procedure only
	Ojected oriented - each in term of object 

python - support OOP

Concept/features must be supported by language

	1. class
	2. Object
	3. Inheritance
	4. Encapsulation
	5. Polymorphisum
	6. Abstraction

1. class - blueprint of object
	 - collection object
	 - data members and member function
	Human  
	Person 	 - name,c_number,address,b_group	
		   getDetails(), display()
	Car
	
 SELF - current instance/object

2. object - it's is instance of class
		-real entity 
	- dharmishtha , pooja
	-Bhavesh , priyam
	-bmw ,

constructor - to initlize object
	getDetails() - remove this 
	
Vehical - brand , model_year
	
3. inheritance
	Parent - child 
	property of one class can use another class
	reusability

	Person name,c_no,address
	Employee - department,salary
	Manager - managerial_task

	Manager is employee and employee is person
	
	employee is person

	employee has name,c_no_address and salary
	
	Person doesn't have deparment/salary

	Person - base class , super class
	Employee - child ,sub class

	1 Single - Person -Employee 
	2. Multilevel - Person - Employee -Manager
	3. Multiple - Mother - Father - Son
	4. Hybrid - mixing of any inheritance
	5. Hierarchical  - Mother - Son & Daughter

Polymorphisum 	- Many form
		 1 Complie time / static binding e.g Method Overloading and Operator Overloading
			Overloading 
			same method name but parameters are diffrent
			Python does not support method overloading
			Operator Overloading +,-,*,==,>=
			10+20
			p1=Point (23,34)
			p2=Point(1,2)
			p1+p2

			p3=p1+p2 Point(p1.x+p2.x , p1.y+p2.y)
			p1 - self
			p2 - other
			return p3
			
			functions - default arguments 
	

		overloading - method -operator
		method overloading - same function name and different arguments -not supported in python directoly
		so we are using default parameter
		operator overloading -- + numeric , str
		object : special methods __add__
		p1>p2
		p1==p2
		p1<=p2 - special method overloading operator
		i=10
		j=90
		i<=j
		

						
		2 Run timne / Dynamic binding
			method Overridning (same method name , same argument)
			
8th Sep

	Polymorphsium 
		more then one form
		1. Compile time/static binding 	
			e.g method overloading / operator overloading (+,-,/,>=,<= ....)
			directly not suported by python
			method overloading - same method name ,arguments are different
			thru the default paramters 
			
		
			Operator Overloading
				def __add__(self,t,t1):
					
					d3=Distance(self.feet+t.feet , self.inches+t.inches)
					return d3

class Distance:
	feet,inches 

d1=Distance(2,8)
d2=Distance(4,6)

d3=d1+d2
d3.feet= 6
d3.inches = 14
# backend d1-self d2-t
d1.add(d2)



				__sub__
							
		2. Run time/dynamic binding
		 	e.g method overriding 
		
			same method name and same parameter/argument
			use inheritance

			Person 
				display()
					# name no

			Employee(Person):
				# salary dept
				display - ovrridng d
							


Abstraction - showing only essential details ,other are hiding
		1.abstract class (ABC) entends
		2. abstract and non - abstract method		
		3. can not instantiate/create object of abstract
		4. abstract methods doesn't have body/declaration
		5. implementation of abstract methods in sub class
		
		class vs abstract class
		method vs abstract methodd
 
